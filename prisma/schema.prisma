generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  code               String               @unique @default("")
  name               String               @default("")
  password           String               @default("")
  mailaddress        String               @unique @default("")
  games              GameOnUser[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  killingUserActions UserAction[]
  votes              Vote[]
  hostGame           Game[]
  Action             Action[]
  actionDecisiveUser ActionDecisiveUser[]
}

model AltUser {
  id          Int      @id @default(autoincrement())
  mailaddress String   @unique @default("")
  resistCode  String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

enum GameStatusTytpe {
  OPENED
  TIMEUP
  COMPLETED
  CANCEL
  COLLAPSE
  ERROR
}

model Game {
  id         Int          @id @default(autoincrement())
  gameName   String       @unique
  gameTitle  String
  hostUser   User         @relation(fields: [hostUserId], references: [id])
  hostUserId Int
  users      GameOnUser[]

  actions           Action[]
  finnalyReleasing  Boolean
  maxMembers        Int
  password          String
  discussionSeconds Int             @default(180)
  timeLimit         DateTime        @default(now())
  status            GameStatusTytpe @default(OPENED)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  userActions       UserAction[]
}

model GameOnUser {
  userId Int
  user   User @relation(fields: [userId], references: [id])
  gameId Int
  game   Game @relation(fields: [gameId], references: [id])

  fetishism String
  isDied    Boolean @default(false)
  isWolf    Boolean @default(false)

  @@id([userId, gameId])
}

enum ActionType {
  READY
  INPUT
  DISCUSSION
  JUDGEMENT
  EXECUTION
  PLOT
  KILL
  RESULT
}

model Action {
  id           Int          @id @default(autoincrement())
  gameId       Int
  game         Game         @relation(fields: [gameId], references: [id])
  type         ActionType
  userActions  UserAction[]
  killedUserId Int?
  killedUser   User?        @relation(fields: [killedUserId], references: [id])

  timeLimit DateTime @default(now())
  createdAt DateTime @default(now())
  votes     Vote[]

  actionDecisiveUser ActionDecisiveUser[]
}

model UserAction {
  id       Int    @id @default(autoincrement())
  actionId Int
  action   Action @relation(fields: [actionId], references: [id])
  gameId   Int?
  game     Game?  @relation(fields: [gameId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  voteId Int?
  vote   Vote? @relation(fields: [voteId], references: [id])

  completed Boolean
}

model ActionDecisiveUser {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  actionId Int
  action   Action @relation(fields: [actionId], references: [id])
}

model Vote {
  id          Int          @id @default(autoincrement())
  userAction  UserAction[]
  actionId    Int
  action      Action       @relation(fields: [actionId], references: [id])
  votedUserId Int
  votedUser   User         @relation(fields: [votedUserId], references: [id])
}
